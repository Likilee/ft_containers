1414,2112c1414,1486
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
< ~foo::foo()
---
> =================================================================
> ==19967==ERROR: AddressSanitizer: heap-use-after-free on address 0x603000003440 at pc 0x0001086b8404 bp 0x7ffee754d540 sp 0x7ffee754d538
> READ of size 8 at 0x603000003440 thread T0
>     #0 0x1086b8403 in ft::bidirection_iter<foo<int>, foo<int>*, foo<int>&, ft::list_node<foo<int> >*, ft::bidirectional_iterator_tag, long>::operator++() bidirection_iter.hpp:66
>     #1 0x1086ba7d7 in ft::list<foo<int>, std::__1::allocator<foo<int> > >::erase(ft::bidirection_iter<foo<int>, foo<int>*, foo<int>&, ft::list_node<foo<int> >*, ft::bidirectional_iterator_tag, long>, ft::bidirection_iter<foo<int>, foo<int>*, foo<int>&, ft::list_node<foo<int> >*, ft::bidirectional_iterator_tag, long>) list.hpp:315
>     #2 0x1086ba252 in ft::list<foo<int>, std::__1::allocator<foo<int> > >::clear() list.hpp:344
>     #3 0x1086bb464 in ft::list<foo<int>, std::__1::allocator<foo<int> > >::~list() list.hpp:148
>     #4 0x1086b9234 in ft::list<foo<int>, std::__1::allocator<foo<int> > >::~list() list.hpp:147
>     #5 0x1086b7d08 in main huge_sort.cpp:93
>     #6 0x7fff68b60cc8 in start+0x0 (libdyld.dylib:x86_64+0x1acc8)
> 
> 0x603000003440 is located 16 bytes inside of 24-byte region [0x603000003430,0x603000003448)
> freed by thread T0 here:
>     #0 0x10872dc0d in wrap__ZdlPv+0x7d (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0x55c0d)
>     #1 0x1086bad04 in std::__1::_DeallocateCaller::__do_call(void*) new:334
>     #2 0x1086bace8 in std::__1::_DeallocateCaller::__do_deallocate_handle_size(void*, unsigned long) new:292
>     #3 0x1086bacc0 in std::__1::_DeallocateCaller::__do_deallocate_handle_size_align(void*, unsigned long, unsigned long) new:262
>     #4 0x1086bac94 in std::__1::__libcpp_deallocate(void*, unsigned long, unsigned long) new:340
>     #5 0x1086bac3d in std::__1::allocator<ft::list_node<foo<int> > >::deallocate(ft::list_node<foo<int> >*, unsigned long) memory:1872
>     #6 0x1086bab02 in ft::list<foo<int>, std::__1::allocator<foo<int> > >::erase(ft::bidirection_iter<foo<int>, foo<int>*, foo<int>&, ft::list_node<foo<int> >*, ft::bidirectional_iterator_tag, long>) list.hpp:305
>     #7 0x1086ba7b2 in ft::list<foo<int>, std::__1::allocator<foo<int> > >::erase(ft::bidirection_iter<foo<int>, foo<int>*, foo<int>&, ft::list_node<foo<int> >*, ft::bidirectional_iterator_tag, long>, ft::bidirection_iter<foo<int>, foo<int>*, foo<int>&, ft::list_node<foo<int> >*, ft::bidirectional_iterator_tag, long>) list.hpp:314
>     #8 0x1086ba252 in ft::list<foo<int>, std::__1::allocator<foo<int> > >::clear() list.hpp:344
>     #9 0x1086bb464 in ft::list<foo<int>, std::__1::allocator<foo<int> > >::~list() list.hpp:148
>     #10 0x1086b9234 in ft::list<foo<int>, std::__1::allocator<foo<int> > >::~list() list.hpp:147
>     #11 0x1086b7d08 in main huge_sort.cpp:93
>     #12 0x7fff68b60cc8 in start+0x0 (libdyld.dylib:x86_64+0x1acc8)
> 
> previously allocated by thread T0 here:
>     #0 0x10872d7ed in wrap__Znwm+0x7d (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0x557ed)
>     #1 0x1086b9c98 in std::__1::__libcpp_allocate(unsigned long, unsigned long) new:253
>     #2 0x1086b9b74 in std::__1::allocator<ft::list_node<foo<int> > >::allocate(unsigned long, void const*) memory:1869
>     #3 0x1086baeb2 in ft::list<foo<int>, std::__1::allocator<foo<int> > >::insert(ft::bidirection_iter<foo<int>, foo<int>*, foo<int>&, ft::list_node<foo<int> >*, ft::bidirectional_iterator_tag, long>, foo<int> const&) list.hpp:276
>     #4 0x1086ba50e in void ft::list<foo<int>, std::__1::allocator<foo<int> > >::insert<foo<int>*>(ft::bidirection_iter<foo<int>, foo<int>*, foo<int>&, ft::list_node<foo<int> >*, ft::bidirectional_iterator_tag, long>, foo<int>*, foo<int>*, ft::enable_if<ft::is_iter<foo<int>*>::value, void>::yes) list.hpp:294
>     #5 0x1086b9a1b in void ft::list<foo<int>, std::__1::allocator<foo<int> > >::assign<foo<int>*>(foo<int>*, foo<int>*, ft::enable_if<ft::is_iter<foo<int>*>::value, void>::yes) list.hpp:242
>     #6 0x1086b9492 in ft::list<foo<int>, std::__1::allocator<foo<int> > >::list<foo<int>*>(foo<int>*, foo<int>*, std::__1::allocator<foo<int> > const&, std::__1::allocator<ft::list_node<foo<int> > >, ft::enable_if<ft::is_iter<foo<int>*>::value, void>::yes) list.hpp:137
>     #7 0x1086b8084 in ft::list<foo<int>, std::__1::allocator<foo<int> > >::list<foo<int>*>(foo<int>*, foo<int>*, std::__1::allocator<foo<int> > const&, std::__1::allocator<ft::list_node<foo<int> > >, ft::enable_if<ft::is_iter<foo<int>*>::value, void>::yes) list.hpp:135
>     #8 0x1086b79ec in main huge_sort.cpp:82
>     #9 0x7fff68b60cc8 in start+0x0 (libdyld.dylib:x86_64+0x1acc8)
> 
> SUMMARY: AddressSanitizer: heap-use-after-free bidirection_iter.hpp:66 in ft::bidirection_iter<foo<int>, foo<int>*, foo<int>&, ft::list_node<foo<int> >*, ft::bidirectional_iterator_tag, long>::operator++()
> Shadow bytes around the buggy address:
>   0x1c0600000630: fa fa 00 00 00 fa fa fa 00 00 00 fa fa fa 00 00
>   0x1c0600000640: 00 fa fa fa 00 00 00 fa fa fa 00 00 00 fa fa fa
>   0x1c0600000650: 00 00 00 fa fa fa 00 00 00 fa fa fa 00 00 00 fa
>   0x1c0600000660: fa fa 00 00 00 fa fa fa 00 00 00 fa fa fa 00 00
>   0x1c0600000670: 00 fa fa fa 00 00 00 fa fa fa 00 00 00 fa fa fa
> =>0x1c0600000680: 00 00 00 fa fa fa fd fd[fd]fa fa fa 00 00 00 fa
>   0x1c0600000690: fa fa 00 00 00 fa fa fa 00 00 00 fa fa fa 00 00
>   0x1c06000006a0: 00 fa fa fa 00 00 00 fa fa fa 00 00 00 fa fa fa
>   0x1c06000006b0: 00 00 00 fa fa fa 00 00 00 fa fa fa 00 00 00 fa
>   0x1c06000006c0: fa fa 00 00 00 fa fa fa 00 00 00 fa fa fa 00 00
>   0x1c06000006d0: 00 fa fa fa 00 00 00 fa fa fa 00 00 00 fa fa fa
> Shadow byte legend (one shadow byte represents 8 application bytes):
>   Addressable:           00
>   Partially addressable: 01 02 03 04 05 06 07 
>   Heap left redzone:       fa
>   Freed heap region:       fd
>   Stack left redzone:      f1
>   Stack mid redzone:       f2
>   Stack right redzone:     f3
>   Stack after return:      f5
>   Stack use after scope:   f8
>   Global redzone:          f9
>   Global init order:       f6
>   Poisoned by user:        f7
>   Container overflow:      fc
>   Array cookie:            ac
>   Intra object redzone:    bb
>   ASan internal:           fe
>   Left alloca redzone:     ca
>   Right alloca redzone:    cb
>   Shadow gap:              cc
> ==19967==ABORTING
