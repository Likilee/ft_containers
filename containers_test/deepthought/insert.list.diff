44c44
< size: 4
---
> size: 5
51a52
> - 84
53,54c54,61
< size: 14
< max_size: 768614336404564650
---
> =================================================================
> ==19995==ERROR: AddressSanitizer: heap-use-after-free on address 0x603000001730 at pc 0x00010b8e4904 bp 0x7ffee4320fa0 sp 0x7ffee4320f98
> READ of size 8 at 0x603000001730 thread T0
>     #0 0x10b8e4903 in ft::bidirection_iter<int, int*, int&, ft::list_node<int>*, ft::bidirectional_iterator_tag, long>::operator++() bidirection_iter.hpp:66
>     #1 0x10b8e8ee7 in ft::list<int, std::__1::allocator<int> >::erase(ft::bidirection_iter<int, int*, int&, ft::list_node<int>*, ft::bidirectional_iterator_tag, long>, ft::bidirection_iter<int, int*, int&, ft::list_node<int>*, ft::bidirectional_iterator_tag, long>) list.hpp:315
>     #2 0x10b8e4a82 in ft::list<int, std::__1::allocator<int> >::clear() list.hpp:344
>     #3 0x10b8e2ee3 in main insert.cpp:30
>     #4 0x7fff68b60cc8 in start+0x0 (libdyld.dylib:x86_64+0x1acc8)
56,73c63,75
< Content is:
< - 21
< - 42
< - 30
< - 27
< - 24
< - 21
< - 18
< - 15
< - 12
< - 9
< - 6
< - 3
< - 21
< - 42
< ###############################################
< size: 0
< max_size: 768614336404564650
---
> 0x603000001730 is located 16 bytes inside of 24-byte region [0x603000001720,0x603000001738)
> freed by thread T0 here:
>     #0 0x10b959c0d in wrap__ZdlPv+0x7d (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0x55c0d)
>     #1 0x10b8e8cf4 in std::__1::_DeallocateCaller::__do_call(void*) new:334
>     #2 0x10b8e8cd8 in std::__1::_DeallocateCaller::__do_deallocate_handle_size(void*, unsigned long) new:292
>     #3 0x10b8e8cb0 in std::__1::_DeallocateCaller::__do_deallocate_handle_size_align(void*, unsigned long, unsigned long) new:262
>     #4 0x10b8e8c84 in std::__1::__libcpp_deallocate(void*, unsigned long, unsigned long) new:340
>     #5 0x10b8e8c2d in std::__1::allocator<ft::list_node<int> >::deallocate(ft::list_node<int>*, unsigned long) memory:1872
>     #6 0x10b8e8b72 in ft::list<int, std::__1::allocator<int> >::erase(ft::bidirection_iter<int, int*, int&, ft::list_node<int>*, ft::bidirectional_iterator_tag, long>) list.hpp:305
>     #7 0x10b8e8ec2 in ft::list<int, std::__1::allocator<int> >::erase(ft::bidirection_iter<int, int*, int&, ft::list_node<int>*, ft::bidirectional_iterator_tag, long>, ft::bidirection_iter<int, int*, int&, ft::list_node<int>*, ft::bidirectional_iterator_tag, long>) list.hpp:314
>     #8 0x10b8e4a82 in ft::list<int, std::__1::allocator<int> >::clear() list.hpp:344
>     #9 0x10b8e2ee3 in main insert.cpp:30
>     #10 0x7fff68b60cc8 in start+0x0 (libdyld.dylib:x86_64+0x1acc8)
75,76c77,122
< Content is:
< ###############################################
---
> previously allocated by thread T0 here:
>     #0 0x10b9597ed in wrap__Znwm+0x7d (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0x557ed)
>     #1 0x10b8e54c8 in std::__1::__libcpp_allocate(unsigned long, unsigned long) new:253
>     #2 0x10b8e5394 in std::__1::allocator<ft::list_node<int> >::allocate(unsigned long, void const*) memory:1869
>     #3 0x10b8e3cc2 in ft::list<int, std::__1::allocator<int> >::insert(ft::bidirection_iter<int, int*, int&, ft::list_node<int>*, ft::bidirectional_iterator_tag, long>, int const&) list.hpp:276
>     #4 0x10b8e4057 in ft::list<int, std::__1::allocator<int> >::insert(ft::bidirection_iter<int, int*, int&, ft::list_node<int>*, ft::bidirectional_iterator_tag, long>, unsigned long, int const&) list.hpp:286
>     #5 0x10b8e523c in ft::list<int, std::__1::allocator<int> >::assign(unsigned long, int const&) list.hpp:248
>     #6 0x10b8e4cd9 in ft::list<int, std::__1::allocator<int> >::list(unsigned long, int const&, std::__1::allocator<int> const&, std::__1::allocator<ft::list_node<int> >) list.hpp:128
>     #7 0x10b8e340c in ft::list<int, std::__1::allocator<int> >::list(unsigned long, int const&, std::__1::allocator<int> const&, std::__1::allocator<ft::list_node<int> >) list.hpp:126
>     #8 0x10b8e2787 in main insert.cpp:7
>     #9 0x7fff68b60cc8 in start+0x0 (libdyld.dylib:x86_64+0x1acc8)
> 
> SUMMARY: AddressSanitizer: heap-use-after-free bidirection_iter.hpp:66 in ft::bidirection_iter<int, int*, int&, ft::list_node<int>*, ft::bidirectional_iterator_tag, long>::operator++()
> Shadow bytes around the buggy address:
>   0x1c0600000290: 00 00 00 00 fa fa 00 00 00 00 fa fa 00 00 00 00
>   0x1c06000002a0: fa fa 00 00 00 00 fa fa 00 00 00 00 fa fa 00 00
>   0x1c06000002b0: 00 00 fa fa 00 00 00 00 fa fa 00 00 00 00 fa fa
>   0x1c06000002c0: 00 00 00 00 fa fa 00 00 00 00 fa fa 00 00 00 00
>   0x1c06000002d0: fa fa 00 00 00 00 fa fa 00 00 00 00 fa fa 00 00
> =>0x1c06000002e0: 00 fa fa fa fd fd[fd]fa fa fa 00 00 00 fa fa fa
>   0x1c06000002f0: 00 00 00 fa fa fa 00 00 00 fa fa fa 00 00 00 fa
>   0x1c0600000300: fa fa 00 00 00 fa fa fa 00 00 00 fa fa fa 00 00
>   0x1c0600000310: 00 fa fa fa 00 00 00 fa fa fa 00 00 00 fa fa fa
>   0x1c0600000320: 00 00 00 fa fa fa 00 00 00 fa fa fa 00 00 00 fa
>   0x1c0600000330: fa fa 00 00 00 fa fa fa 00 00 00 fa fa fa 00 00
> Shadow byte legend (one shadow byte represents 8 application bytes):
>   Addressable:           00
>   Partially addressable: 01 02 03 04 05 06 07 
>   Heap left redzone:       fa
>   Freed heap region:       fd
>   Stack left redzone:      f1
>   Stack mid redzone:       f2
>   Stack right redzone:     f3
>   Stack after return:      f5
>   Stack use after scope:   f8
>   Global redzone:          f9
>   Global init order:       f6
>   Poisoned by user:        f7
>   Container overflow:      fc
>   Array cookie:            ac
>   Intra object redzone:    bb
>   ASan internal:           fe
>   Left alloca redzone:     ca
>   Right alloca redzone:    cb
>   Shadow gap:              cc
> ==19995==ABORTING
